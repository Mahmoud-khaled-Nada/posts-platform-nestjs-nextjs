generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  firstName        String          @map("first_name")
  lastName         String          @map("last_name")
  username         String          @unique
  password         String
  comments         Comment[]
  receivedRequests FriendRequest[] @relation("Receiver")
  sentRequests     FriendRequest[] @relation("Sender")
  receivedFriends  Friends[]       @relation("FriendReceiver")
  sentFriends      Friends[]       @relation("FriendSender")
  likes            Like[]
  posts            Post[]

  @@map("users")
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  userId    Int       @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId], map: "posts_user_id_fkey")
  @@map("posts")
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  postId Int  @map("post_id")
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@index([postId], map: "likes_post_id_fkey")
  @@index([userId], map: "likes_user_id_fkey")
  @@map("likes")
}

model Comment {
  id      Int    @id @default(autoincrement())
  userId  Int    @map("user_id")
  postId  Int    @map("post_id")
  content String
  post    Post   @relation(fields: [postId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@index([postId], map: "comments_post_id_fkey")
  @@index([userId], map: "comments_user_id_fkey")
  @@map("comments")
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("pending")
  createdAt  DateTime @default(now()) @map("created_at")
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  sender     User     @relation("Sender", fields: [senderId], references: [id])

  @@index([receiverId], map: "friend_request_receiverId_fkey")
  @@index([senderId], map: "friend_request_senderId_fkey")
  @@map("friend_request")
}

model Friends {
  id         Int      @id @default(autoincrement())
  senderId   Int      @map("sender_id")
  receiverId Int      @map("receiver_id")
  createdAt  DateTime @default(now()) @map("created_at")
  receiver   User     @relation("FriendReceiver", fields: [receiverId], references: [id])
  sender     User     @relation("FriendSender", fields: [senderId], references: [id])

  @@index([receiverId], map: "friends_receiver_id_fkey")
  @@index([senderId], map: "friends_sender_id_fkey")
  @@map("friends")
}

model Notification {
  id             String    @id @default(uuid())
  notifiableId   Int       @map("notifiable_id")
  notifiableType String    @map("notifiable_type")
  data           Json
  readAt         DateTime? @map("read_at")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@map("notifications")
}
